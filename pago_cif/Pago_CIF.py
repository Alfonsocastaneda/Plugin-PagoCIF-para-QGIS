# -*- coding: utf-8 -*-
"""
/***************************************************************************
 PagoCIF
                                 A QGIS plugin
 Plugin que calcula el pago del beneficio CIF 
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-04-11
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Belky Alfonso , Enrique Blanco, Universidad Distrital Francisco Jose de Caldas
        email                : byalfonsoc@udistrital.edu.co y eblancob@udistrital.edu.co 
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction,QMessageBox


import pandas as pd
import sqlite3
import pathlib
from qgis.core import QgsVectorLayer, QgsProject, QgsCoordinateReferenceSystem,QgsVectorLayer, QgsVectorFileWriter
import processing
from datetime import datetime

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .Pago_CIF_dialog import PagoCIFDialog
import os.path  # libreria para trabajar con directorios
import tempfile # libreria para crear los archivos temporales de los shapefile 
import locale  # libreria para dar formato de moneda a los precios


class PagoCIF:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'PagoCIF_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Pago CIF')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None
        # almacena el archivo con los datos de la aplicación
        self.rutaBase = str(pathlib.Path(__file__).parent.absolute()) +'/datos/infoCIF.xlsx'
        # almacena el archivo con los datos de la divipola
        self.divipola = str(pathlib.Path(__file__).parent.absolute()) +'/datos/divipolaCIF.xlsx'
        # almacena el archivo con el valor de precios por arbol para establecimientos
        self.valorBosqueEstablecimiento = str(pathlib.Path(__file__).parent.absolute()) +'/datos/val_BosqueMantenimiento.txt'
        # almacena el archivo de ayuda
        self.achivoAyuda = str(pathlib.Path(__file__).parent.absolute()) +'/manual/manual.pdf'

        self.complemento_region = ""

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('PagoCIF', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/Pago_CIF/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Pago CIF'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Pago CIF'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = PagoCIFDialog(self)

        # show the dialog
        self.dlg.show()

        ############################## Inicio lógica del plugin ##########################
        # función que carga el archivo de excel y lo convierte en un dataframe de pandas
        dataframe_deptos = self.cargarexcel(self.dlg.divipola)
        # query para obtener los departamentos
        query_deptos = f'''Select DISTINCT "Nombre Departamento" FROM data order by 1 ASC'''
        lista_deptos = self.consultarsqllist(dataframe_deptos, query_deptos)
        self.dlg.cBDepartamento.addItems(lista_deptos)
        # esconder los labels de PDET y PNIS
        self.dlg.lbPNIS.hide()
        self.dlg.lbPDET.hide()
        # deshabilitar controles de áreas y pago
        self.dlg.lEAreaPlantacion.setEnabled(False)
        self.dlg.lEAreaBosque.setEnabled(False)
        self.dlg.lePagoCif.setEnabled(False)


    # convierte el excel de los datos CIF en una base 
    def cargarexcel(self,archivo):
        dataframe = pd.read_excel(archivo)
        return(dataframe)
    
    # llena el listado de municipios en el formulario
    def llenarlistamupios(self):
        self.dlg.cBMunicipio.clear()
        dataframe_mupios = self.cargarexcel(self.dlg.divipola)
        depto_seleccionado = self.dlg.cBDepartamento.currentText()
        query_mpios = f'''Select DISTINCT "Nombre Municipio" FROM data WHERE "Nombre Departamento" = '{depto_seleccionado}' order by 1 ASC'''
        lista_mpios = self.consultarsqllist(dataframe_mupios, query_mpios)
        self.dlg.cBMunicipio.addItems(lista_mpios)
        self.validarmpio()

    # valida el municipio para obtener la región
    def validarmpio(self):
        dataframe_datos = self.cargarexcel(self.dlg.divipola)
        depto_seleccionado = self.dlg.cBDepartamento.currentText()
        mupio_seleccionado = self.dlg.cBMunicipio.currentText()
        query_datos = f'''Select * FROM data WHERE "Nombre Departamento" = '{depto_seleccionado}' AND "Nombre Municipio" = '{mupio_seleccionado}' order by 1 ASC'''
        
        try:
            dicionario_todo = self.consultarsqldict(dataframe_datos, query_datos)
            # nos devuelve el contenido de la lista ya que el diccionario se almacena como un solo resgistro dentro de la lista
            dicionario = dicionario_todo[0]
            region = dicionario['Región']
            self.dlg.lERegion.setText(region)
            

            if dicionario['PNIS'] == 1:
                self.dlg.lbPNIS.show()
                self.complemento_region = '''PNIS Y PDET'''
            else:
                self.dlg.lbPNIS.hide()
                self.complemento_region = '''DIFERENTES A PNIS Y PDET'''

            if dicionario['PDET'] == 1:
                self.dlg.lbPDET.show()
                self.complemento_region = '''PNIS Y PDET'''
            else:
                self.dlg.lbPDET.hide()
                self.complemento_region = '''DIFERENTES A PNIS Y PDET'''

            if dicionario['PNIS'] == 1 and dicionario['PDET'] == 1:
                self.complemento_region = '''PNIS Y PDET'''

            self.cargarlistaespecies()
            
        except:
            pass
         
        
    # crea una base de datos de sqlite a partir de un dataframe de pandas 
    def consultarsqllist(self, dataframe, query):
        # crea una base de datos de sqlite en memoria y almacena la conexión
        conn = sqlite3.connect(':memory:')
        # almacena el dataframe en la base de datos
        dataframe.to_sql('data', conn, index=False)
        # ejecuta una consulta sobre la base
        result = pd.read_sql_query(query, conn)
        # convierte los resultados de un dataframe a lista
        result_list = list(result.iloc[:, 0])
        # cierra la conexión
        conn.close()
        # retorna los registros resultantes de la consulta
        return (result_list)
    
    def consultarsqldict(self, dataframe, query):
        # crea una base de datos de sqlite en memoria y almacena la conexión
        conn = sqlite3.connect(':memory:')
        # almacena el dataframe en la base de datos
        dataframe.to_sql('data', conn, index=False)
        # ejecuta una consulta sobre la base
        result = pd.read_sql_query(query, conn)
        # convierte los resultados de un dataframe a un diccionario
        result_list = result.to_dict(orient='records')
        # cierra la conexión
        conn.close()
        # retorna los registros resultantes de la consulta
        return (result_list)
    
    
    def calcularresultado(self):
        proceder = False

        # borra las áreas calculadas 
        self.dlg.lEAreaPlantacion.clear()
        self.dlg.lEAreaBosque.clear()
        # habilitar controles de áreas y pago
        self.dlg.lEAreaPlantacion.setEnabled(True)
        self.dlg.lePagoCif.setEnabled(True)
        # captura los datos de densidad
        etapa = self.dlg.cBEtapa.currentText()
        densidad = self.dlg.dSPDensidad.value()
        if densidad == '':
            densidad = float(0)
        else:
            densidad = float(self.dlg.dSPDensidad.value())

        if etapa == "Establecimiento" and densidad < 1:
            msgBox = QMessageBox()
            msgBox.setIcon(QMessageBox.Critical)
            msgBox.setText("Por favor ingrese un valor de densidad")
            msgBox.setWindowTitle("Advertencia")
            msgBox.exec()

        else:
            # Validar capa de plantación
            validacion_plantacion, capa_proyectada = self.validarcapa(self.dlg.mMCbPlantacion.currentLayer(),"plantación")
            # si la validación es correcta y la capa proyectada no es nula
            if validacion_plantacion is True and capa_proyectada is not None :   
                # calcular área de plantación
                self.calculararea(capa_proyectada,self.dlg.lEAreaPlantacion)
                proceder = True

            elif validacion_plantacion is True and capa_proyectada is None:
                self.calculararea(self.dlg.mMCbPlantacion.currentLayer(),self.dlg.lEAreaPlantacion)
                proceder = True


            if proceder is True:
                # si la opción de calcular área bosque está activo
                # se habilita el control que almacena el área del bosque
                if self.dlg.cBAreaBosque.isChecked():
                    self.dlg.lEAreaBosque.setEnabled(True)

                    self.dlg.lEAreaBosque.setText(str(float(self.dlg.lEAreaPlantacion.text()) *0.2))
                    # si la validación es correcta y la capa proyectada no es nula
                    # if validacion_bosques is True and capa_proyectada_bosques is not None :   
                    #     # calcular área de bosque
                    #     self.calculararea(capa_proyectada_bosques,self.dlg.lEAreaBosque)
                    # elif validacion_bosques is True and capa_proyectada_bosques is None:
                    #     self.calculararea(self.dlg.mMCbBosque.currentLayer(),self.dlg.lEAreaBosque)
                else:
                    self.dlg.lEAreaBosque.setEnabled(False)

                self.validarformulario()


    def validarformulario(self):
        # variables temporales que almacenan los nombre de los campos y los precios por hectáreas
        campo_calculo = None
        campo_calculo_bosque = None
        valorRessinBosque = 0
        valorResConBosque = 0

        # captura los valores de los diferentes controles del formulario
        depto = self.dlg.cBDepartamento.currentText()
        mupio = self.dlg.cBMunicipio.currentText()
        region = self.dlg.lERegion.text()
        pdet =  self.dlg.lbPNIS.isVisible()
        pnis =  self.dlg.lbPDET.isVisible()
        tiene_bosque = self.dlg.cBAreaBosque.isChecked()
        especie = self.dlg.cBEspecie.currentText()
        densidad = self.dlg.dSPDensidad.value()
        if densidad == '':
            densidad = float(0)
        else:
            densidad = float(self.dlg.dSPDensidad.value())
        etapa = self.dlg.cBEtapa.currentText()
        area_plantacion = float(self.dlg.lEAreaPlantacion.text())
        if self.dlg.lEAreaBosque.text() != '':
            area_bosque = float(self.dlg.lEAreaBosque.text())
        else:
            area_bosque = float(0)

        # define un formulario con todos los valores de los controles
        formulario = {
        'departamento': depto,
        'municipio': mupio,
        'region': region,
        'tiene_pdet': pdet,
        'tiene_pnis': pnis,
        'tiene_bosque': tiene_bosque,
        'especie': especie,
        'densidad': densidad,
        'etapa': etapa,
        'area_plantacion': area_plantacion,
        'area_bosque': area_bosque,
        'escenario': None
        }


        # definiendo los escenarios de calculo
        if 'Establecimiento' in etapa:
            # valida si el establecimiento no tiene bosque
            if formulario['tiene_bosque'] is False:
                if densidad >= 1000:
                    formulario.update({'escenario': 1})
                    campo_calculo = 'Establecimiento mayor a 1000'
                else:
                    formulario.update({'escenario': 2})
                    campo_calculo = 'Establecimiento menor a 1000'

            else: # establecimiento con bosque
                

                if densidad >= 1000:
                    campo_calculo = 'Establecimiento mayor a 1000'
                    formulario.update({'escenario': 6})
                else:
                    campo_calculo = 'Establecimiento menor a 1000'
                    formulario.update({'escenario': 5})

                #campo_calculo_bosque =  campo_calculo

        else: # Mantenimiento 
            formulario.update({'escenario': 4})
            if formulario['tiene_bosque'] is True:
                campo_calculo = etapa
                campo_calculo_bosque =  etapa + ' con bosque'

            else: # sin bosque
                campo_calculo = etapa
                    

        # almacena los campos de la base de datos que contienen las diferentes etapas 
        campos_etapas = {'Establecimiento menor a 1000':'Vlr_Establecimiento_arbol_menor1000ha',	
                          'Establecimiento mayor a 1000':'Vlr_Establecimiento_arbol_mayor1000ha',
                          'Mantenimiento 1':'vlr_M1ha',
                          'Mantenimiento 2':'vlr_M2ha',	
                          'Mantenimiento 3':'vlr_M3ha',	
                          'Mantenimiento 4':'vlr_M4ha',	
                          'Mantenimiento 1 con bosque':'vlr_M1ha_Bosque',	
                          'Mantenimiento 2 con bosque':'vlr_M2_ha_Bosque',	
                          'Mantenimiento 3 con bosque':'vlr_M3ha_Bosque',	
                          'Mantenimiento 4 con bosque':'vlr_M4_arbol_Bosque'}
        
        # obtiene el campo para el cálculo una vez validado el bosque y el área
        campo_calculo = campos_etapas[campo_calculo]
        if campo_calculo_bosque is not None:
            campo_calculo_bosque = campos_etapas[campo_calculo_bosque]

        # carga la base de datos 
        dataframe = self.cargarexcel(self.dlg.rutaBase)


        if formulario['tiene_bosque']:

            # construye la expresión de consulta del precio con bosque
            if especie == 'Hevea brasiliensis':
                if formulario['tiene_pdet'] is True or formulario['tiene_pnis'] is True: 
                    # crea la expresión para la consulta cuando es Hevea brasiliensis y es PNIS o PDET
                    expresionSQL= f'''select "{campo_calculo_bosque}" from data WHERE "Especie" = 'Hevea brasiliensis' AND "Region" = 'PNIS Y PDET' '''
                else:
                    # crea la expresión para la consulta cuando es Hevea brasiliensis y  NO es PNIS o PDET
                    expresionSQL= f'''select "{campo_calculo_bosque}" from data WHERE "Especie" = 'Hevea brasiliensis' AND "Region" = 'DIFERENTES A PNIS Y PDET' '''
            else:
                # crea la expresión para la consulta de los valores cuando es cualquier otra especie
                expresionSQL= f'''select "{campo_calculo_bosque}" from data WHERE "Especie" = '{formulario['especie']}' AND "Region" = '{formulario['region']}' '''
            
            valorResConBosque= self.consultarsqllist(dataframe, expresionSQL)[0]

            # construye la expresión de consulta del precio sin bosque
            if especie == 'Hevea brasiliensis':
                if formulario['tiene_pdet'] is True or formulario['tiene_pnis'] is True: 
                    # crea la expresión para la consulta cuando es Hevea brasiliensis y es PNIS o PDET
                    expresionSQL= f'''select "{campo_calculo}" from data WHERE "Especie" = 'Hevea brasiliensis' AND "Region" = 'PNIS Y PDET' '''
                else:
                    # crea la expresión para la consulta cuando es Hevea brasiliensis y  NO es PNIS o PDET
                    expresionSQL= f'''select "{campo_calculo}" from data WHERE "Especie" = 'Hevea brasiliensis' AND "Region" = 'DIFERENTES A PNIS Y PDET' '''
            else:
                # crea la expresión para la consulta de los valores cuando es cualquier otra especie
                expresionSQL= f'''select "{campo_calculo}" from data WHERE "Especie" = '{formulario['especie']}' AND "Region" = '{formulario['region']}' '''
            
            # se obtiene el precio a usar sin bosque
            valorRessinBosque  = self.consultarsqllist(dataframe, expresionSQL)[0]


        else:
            # construye la expresión de consulta del precio sin bosque
            if especie == 'Hevea brasiliensis':
                if formulario['tiene_pdet'] is True or formulario['tiene_pnis'] is True: 
                    # crea la expresión para la consulta cuando es Hevea brasiliensis y es PNIS o PDET
                    expresionSQL= f'''select "{campo_calculo}" from data WHERE "Especie" = 'Hevea brasiliensis' AND "Region" = 'PNIS Y PDET' '''
                else:
                    # crea la expresión para la consulta cuando es Hevea brasiliensis y  NO es PNIS o PDET
                    expresionSQL= f'''select "{campo_calculo}" from data WHERE "Especie" = 'Hevea brasiliensis' AND "Region" = 'DIFERENTES A PNIS Y PDET' '''
            else:
                # crea la expresión para la consulta de los valores cuando es cualquier otra especie
                expresionSQL= f'''select "{campo_calculo}" from data WHERE "Especie" = '{formulario['especie']}' AND "Region" = '{formulario['region']}' '''
            
            # se obtiene el precio a usar sin bosque
            valorRessinBosque  = self.consultarsqllist(dataframe, expresionSQL)[0]
         

        # se realiza el cálculo de acuerdo con el tipo de escenario
        #########################################
        if formulario['escenario'] == 1:
            calculoCIF = valorRessinBosque * formulario['area_plantacion']
        elif formulario['escenario'] == 2:
            if formulario['densidad'] <= 0:
                msgBox = QMessageBox()
                msgBox.setIcon(QMessageBox.Critical)
                msgBox.setText(f"por favor registre un valor de densidad")
                msgBox.setWindowTitle("Advertencia")
                msgBox.exec()
                calculoCIF = 0
            else:
                calculoCIF = (formulario['densidad'] * formulario['area_plantacion']) * valorRessinBosque

        elif formulario['escenario'] == 5: # nuevo escenario definido para establecimiento con bosque

            with open(self.valorBosqueEstablecimiento,'r') as txt:
                valorResConBosque = float(txt.read())
            calculoPlantacion = valorRessinBosque * formulario['area_plantacion'] * formulario['densidad']
            calculoBosque = valorResConBosque * formulario['area_bosque']  * formulario['densidad']
            calculoCIF = calculoPlantacion + calculoBosque

        elif formulario['escenario'] == 6: # nuevo escenario definido para establecimiento con bosque
            with open(self.valorBosqueEstablecimiento,'r') as txt:
                valorResConBosque = float(txt.read())
            calculoPlantacion = valorRessinBosque * formulario['area_plantacion']
            calculoBosque = valorResConBosque * formulario['area_bosque']
            calculoCIF = calculoPlantacion + calculoBosque
        
        else: # el resto es escenario 4
            calculoPlantacion = valorRessinBosque * formulario['area_plantacion']
            calculoBosque = valorResConBosque * formulario['area_bosque']
            calculoCIF = calculoPlantacion + calculoBosque

        # se estable la configuración regional para Colombia
        locale.setlocale(locale.LC_ALL, 'es_CO.UTF-8')

        # se formatea el valor CIF como texto en formato de pesos 
        texto_moneda = locale.currency(calculoCIF, grouping=True)

        self.dlg.lePagoCif.setText(str(texto_moneda)) 
       
        return formulario
        
    # función que almacena el listado de las especies en el formualrio
    def cargarlistaespecies(self):
        dataframe_especie = self.cargarexcel(self.dlg.rutaBase)
        region_seleccionada = self.dlg.lERegion.text()
        query_especie = f'''Select DISTINCT "Especie" FROM data WHERE "Region" in ('{region_seleccionada}','{self.complemento_region}') order by 1 ASC'''
        lista_especie = self.consultarsqllist(dataframe_especie, query_especie)
        
        self.dlg.cBEspecie.clear()
        self.dlg.cBEspecie.addItems(lista_especie)

    # función que calcula el área de un layer y almacena su resultado en un elemento de texto
    def calculararea(self,layer,elementoTextoResultado):
        #epsg_capa = layer.crs().authid()
        areas_hectareas = {}
        area_total_hectareas = 0
        for feature in layer.getFeatures():
            area_m2 = feature.geometry().area()
            area_hectareas = area_m2 / 10000
            area_total_hectareas += area_hectareas
            areas_hectareas[feature.id()] = area_hectareas
        elementoTextoResultado.setText(f"{area_total_hectareas:.2f}")

    
    # realiza la proyección de una capa al origen único nacional
    def proyectarcapa(self,layer):
        if layer:
            # se almacena el nombre de la capa seleccionada
            nombre_capa = layer.name().replace(' ','_')
            # captura la fecha y hora actual para incluirla en el nombre de la capa
            fecha_hora_actual = datetime.now().strftime("%Y%m%d_%H%M%S")
            # crea una ruta para el layer temporal
            temp_shapefile = os.path.join(tempfile.gettempdir(), f"{nombre_capa}_{fecha_hora_actual}.shp")
            # Definir parámetros para la reproyección de la capa
            parameters = {
                'INPUT': layer,
                'TARGET_CRS': 'EPSG:9377',
                'OUTPUT': temp_shapefile
            }

            # Ejecutar el algoritmo de reproyección de capa
            result = processing.run("native:reprojectlayer", parameters)
            capa_proyectada = result['OUTPUT']
            return(capa_proyectada)
        else:
            msgBox = QMessageBox()
            msgBox.setIcon(QMessageBox.Critical)
            msgBox.setText("Por favor seleccione una capa de tipo polígono")
            msgBox.setWindowTitle("Error")
            msgBox.exec()

    # función que valida si la capa se encuentra en uno de los sistemas de coordenadas definidos
    def validarcapa(self,layer,tipo_capa):
        # si existe una capa procede al cálculo
        if layer:
            epsg_capa = layer.crs().authid()
            # si la capa está en MAGNA Colombia geográficas
            if epsg_capa =='EPSG:4326':
                ruta_temp_capa = self.proyectarcapa(layer)
                 # se crea un layer a partir de la capa temporal 
                capa_temp = QgsVectorLayer(ruta_temp_capa, "tmp", "ogr")
                # se crea el sistema de coordenadas de origen único
                crs_destino_final = QgsCoordinateReferenceSystem('EPSG:9377')
                # se le asigna a la capa temporal proyectada en magan geográficas el 
                # sistema de origen único
                capa_temp.setCrs(crs_destino_final)
                return (True, capa_temp)
            # si la capa está en origen nacional
            elif epsg_capa =='EPSG:9377':
                return (True,"")
            else:
                msgBox = QMessageBox()
                msgBox.setIcon(QMessageBox.Critical)
                msgBox.setText(f"El sistema de coordenadas de la capa de {tipo_capa} NO coincide con los sistemas de coordenadas permitidos EPSG 4326 y EPSG 9377.")
                msgBox.setWindowTitle("Advertencia")
                msgBox.exec()
                return (False, None)
        else:
            msgBox = QMessageBox()
            msgBox.setIcon(QMessageBox.Critical)
            msgBox.setText("Por favor seleccione una capa para plantaciones")
            msgBox.setWindowTitle("Advertencia")
            msgBox.exec()
            return (False, None)

    def limpiarformulario(self):
        # reinicia el listado de departamentos
        self.dlg.cBDepartamento.setCurrentIndex(0)
        # borra el campo de densidad
        self.dlg.dSPDensidad.clear()
        # reinicia el listado de etapas 
        self.dlg.cBEtapa.setCurrentIndex(0)
        # reinicia el listado de especies 
        self.dlg.cBEspecie.setCurrentIndex(0)
        # reinicia el listado de capas 
        self.dlg.mMCbPlantacion.setCurrentIndex(0)
        # limpia el checkbox de la capa de bosques
        self.dlg.cBAreaBosque.setChecked(False)
        # borra los campos de áreas
        self.dlg.lEAreaPlantacion.clear()
        self.dlg.lEAreaBosque.clear()
        # borra el campo de pago CIF
        self.dlg.lePagoCif.clear()
        # oculta los labels de PDET y PNIS
        self.dlg.lbPNIS.hide()
        self.dlg.lbPDET.hide()

        # deshabilita controles de áreas y pago
        self.dlg.lEAreaPlantacion.setEnabled(False)
        self.dlg.lEAreaBosque.setEnabled(False)
        self.dlg.lePagoCif.setEnabled(True)

    def abrirayuda(self):
        os.system(self.achivoAyuda)

            